{"version":3,"sources":["actions/index.js","constants.js","components/App.js","reducers/index.js","serviceWorker.js","index.js"],"names":["addReminder","text","dueDate","action","type","console","log","deleteReminder","id","clearReminders","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","reminders","react_default","a","createElement","className","map","reminder","key","onClick","moment","Date","fromNow","_this3","placeholder","onChange","event","setState","target","value","renderReminders","Component","connect","dispatch","bindActionCreators","Math","random","arguments","length","undefined","read_cookie","toConsumableArray","concat","bake_cookie","filter","removeById","Boolean","window","location","hostname","match","store","createStore","reducer","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d998cf0.chunk.js","sourcesContent":["import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../constants';\n\n\nexport const addReminder = (text, dueDate) => {\n    const action = {\n        type: ADD_REMINDER,\n        text: text,\n        dueDate: dueDate\n    }\n\n    console.log('action in addReminder', action);\n\n    return action;\n}\n\nexport const deleteReminder = (id) => {\n    const action = {\n        type: DELETE_REMINDER,\n        id: id\n    }\n\n    console.log('action in deleteReminder', action);\n\n    return action;\n}\n\nexport const clearReminders = () => {\n    const action = {\n        type: CLEAR_REMINDERS\n    }\n    \n    return action;\n}\n","export const ADD_REMINDER = 'ADD_REMINDER';\nexport const DELETE_REMINDER = 'DELETE_REMINDER';\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addReminder, deleteReminder, clearReminders } from '../actions/index';\nimport moment from 'moment';\n\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n            dueDate: ''\n        }\n    }\n\n    addReminder() {\n        this.props.addReminder(this.state.text, this.state.dueDate);\n    }\n\n    deleteReminder(id) {\n        this.props.deleteReminder(id);\n    }\n\n    renderReminders() {\n        const { reminders } = this.props;\n\n        return (\n\n<ul className=\"list-group\">\n    {\n        reminders.map( reminder => {\n            return (\n                <li key={reminder.id}\n                    className=\"list-group-item\">\n                    <div className=\"d-flex justify-content-between align-items-center\">\n                        {reminder.text}\n\n                        <span\n                            className=\"badge\"\n                            onClick={ () => this.deleteReminder(reminder.id) }\n                            >&#x2715;\n                        </span>\n                    </div>\n\n                    <div className=\"font-italic\">\n                        {moment(new Date(reminder.dueDate)).fromNow()}\n                    </div>\n                </li>\n            )\n        })\n    }\n</ul>\n\n        )\n    }\n\n    render() {\n        return (\n<div className=\"container mt-5\">\n\n    <div className=\"row\">\n        <div className=\"col-12 text-center\">\n            <h1>Reminder Pro</h1>\n        </div>\n    </div>\n\n    <div className=\"row mt-5\">\n        <div className=\"col-12\">\n            <div className=\"form-group\">\n                <input\n                    className=\"form-control\"\n                    placeholder=\"I have to ...\"\n                    onChange={event => this.setState({text: event.target.value})}\n                />\n            </div>\n            <div className=\"form-group\">\n                <input\n                    className=\"form-control\"\n                    type=\"date\"\n                    onChange={event => this.setState({dueDate: event.target.value})}\n                />\n            </div>\n\n            <div className=\"d-flex justify-content-end\">\n                <button\n                    type=\"button\"\n                    className=\"btn btn-danger mr-3\"\n                    onClick={() => this.props.clearReminders()}\n                >\n                    Clear Reminders\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    onClick={() => this.addReminder()}\n                >\n                    Add Reminder\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div className=\"row mt-5\">\n        <div className=\"col-12\">\n            { this.renderReminders() }\n        </div>\n    </div>\n\n</div>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({addReminder, deleteReminder, clearReminders}, dispatch);\n}\n\nfunction mapStateToProps(state) {\n    return {\n        reminders: state\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { ADD_REMINDER, DELETE_REMINDER, CLEAR_REMINDERS } from '../constants';\nimport { bake_cookie, read_cookie } from 'sfcookies';\n\nconst reminder = (action) => {\n    return {\n        text: action.text,\n        dueDate: action.dueDate,\n        id: Math.random()\n    }\n}\n\nconst removeById = (state = [], id) => {\n    const reminders = state.filter(reminder => reminder.id !== id);\n    console.log('new reduced reminders', reminders)\n    return reminders;\n}\n\nconst reminders = (state = [],  action) => {\n    let reminders = null;\n\n    state = read_cookie('reminders');\n\n    switch(action.type) {\n        case ADD_REMINDER:\n            reminders = [...state, reminder(action)]\n            bake_cookie('reminders', reminders);\n            return reminders;\n        case DELETE_REMINDER:\n            reminders = removeById( state, action.id );\n            bake_cookie('reminders', reminders);\n            return reminders;\n        case CLEAR_REMINDERS:\n            reminders = [];\n            bake_cookie('reminders', reminders);\n            return reminders;\n        default:\n            return state;\n    }\n}\n\n\nexport default reminders;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\n\nimport App from './components/App';\nimport reducer from './reducers/index';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}